// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel HBlur
#pragma kernel VBlur

#include "Packages/com.unity.postprocessing/PostProcessing/Shaders/StdLib.hlsl"        
        
// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
Texture2D<float4> _Source;
RWTexture2D<float4> Result;

CBUFFER_START(Params)
    float4 _Params1;    // x: screenWidth, y: screenHeight, z: kernelSize, w: halfKernelSize
CBUFFER_END

[numthreads(64,1,1)]
void HBlur (uint3 group_id: SV_GroupID, uint3 id : SV_DispatchThreadID)
{
    int y = id.x;
    
    float4 sum = _Source[uint2(0, y)] * (_Params1.w + 1);
    for (uint i = 0; i < _Params1.w; i ++) {
        sum += _Source[uint2(i, y)];
    } 
    
    int prev = -_Params1.w;
    int next = _Params1.w;
    for (uint i = 0; i < _Params1.x; ++ i) {
        sum -= _Source[uint2(max(0, prev), y)];
        sum += _Source[uint2(min(_Params1.x - 1, next), y)];
        Result[uint2(i, y)] = sum / _Params1.z;
        ++ prev;
        ++ next;
    }
}

[numthreads(64,1,1)]
void VBlur (uint3 group_id: SV_GroupID, uint3 id : SV_DispatchThreadID)
{
    int x = id.x;
    
    float4 sum = _Source[uint2(x, 0)] * (_Params1.w + 1);
    for (uint i = 0; i < _Params1.w; i ++) {
        sum += _Source[uint2(x, i)];
    }
    
    int prev = -_Params1.w;
    int next = _Params1.w;
    for (uint i = 0; i < _Params1.y; ++ i) {
        sum -= _Source[uint2(x, max(0, prev))];
        sum += _Source[uint2(x, min(_Params1.y - 1, next))];
        Result[uint2(x, i)] = sum / _Params1.z;
        ++ prev;
        ++ next;
    }
}